version: '3.3'

services:
  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: coloragent
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for caching and task queues
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Backend API
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/coloragent
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=true
      - JWT_SECRET=dev_secret_key_change_in_production
      - LOG_LEVEL=DEBUG
    depends_on:
      - postgres
      - redis
    volumes:
      - ./apps/api:/app/apps/api
      - api_node_modules:/app/node_modules

  # Web application
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    command: pnpm --filter web dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - APP_BASE_URL=http://localhost:3000
      - API_URL=http://api:8000
    depends_on:
      - api
    volumes:
      - ./apps/web:/app/apps/web
      - ./packages:/app/packages
      - web_node_modules:/app/node_modules

volumes:
  postgres_data:
  redis_data:
  api_node_modules:
  web_node_modules:
